module Testbench;

reg reset;
reg clk;
reg [1:0] H_in1;
reg [3:0] H_in0;
reg [3:0] M_in1;
reg [3:0] M_in0;
reg LD_time;
reg LD_alarm;
reg STOP_al;
reg AL_ON;

// Outputs
wire Alarm;
wire [1:0] H_out1;
wire [3:0] H_out0;
wire [3:0] M_out1;
wire [3:0] M_out0;
wire [3:0] S_out1;
wire [3:0] S_out0;

// Instantiate the Aclock module
Aclock uut (
    .reset(reset), 
    .clk(clk), 
    .H_in1(H_in1), 
    .H_in0(H_in0), 
    .M_in1(M_in1), 
    .M_in0(M_in0), 
    .LD_time(LD_time), 
    .LD_alarm(LD_alarm), 
    .STOP_al(STOP_al), 
    .AL_ON(AL_ON), 
    .Alarm(Alarm), 
    .H_out1(H_out1), 
    .H_out0(H_out0), 
    .M_out1(M_out1), 
    .M_out0(M_out0), 
    .S_out1(S_out1), 
    .S_out0(S_out0)
);

// Clock generation
initial begin 
    clk = 0;
    forever #50 clk = ~clk; // 100 MHz clock period (50ns high, 50ns low)
end

// Stimuli generation
initial begin
    // Initialize Inputs
    reset = 1;
    H_in1 = 1;
    H_in0 = 0;
    M_in1 = 1;
    M_in0 = 9;
    LD_time = 0;
    LD_alarm = 0;
    STOP_al = 0;
    AL_ON = 0;

    // Wait 100 ns for global reset to finish
    #100;
    reset = 0;

    // Load initial time
    LD_time = 1;
    #10;
    LD_time = 0;

    // Set and activate alarm
    LD_alarm = 1;
    H_in1 = 1;
    H_in0 = 0;
    M_in1 = 2;
    M_in0 = 0;
    #10;
    LD_alarm = 0;
    AL_ON = 1;

    // Wait for alarm to trigger
    wait (Alarm);

    // Allow alarm to ring for some time
    #600;

    // Stop the alarm
    STOP_al = 1;
    #10;
    STOP_al = 0;

    // Add additional tests as necessary

    // End simulation after a reasonable time
    #2000; // Adjust this as necessary
    $finish;
end

initial begin
    // Dump waveform
    $dumpfile("waveform.vcd");
    $dumpvars(0, Testbench);
end

endmodule
